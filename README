                                  Intérprete de SQL
                                  -----------------

Objetivo :
----------
El objetivo de este proyecto es poder representar tanto la sintaxis básica del estándar sql como su semántica usando
 el lenguaje Haskell.


Instalación:
------------
Ejecutar install.sh. Se instalarán las librerías necesarias y se compilará el programa usando el comando apropiado.



Forma de uso:
------------
Una vez compilado el programa basta correrlo usando ./Init. En el directorio SQL se proporcionan ejemplos de comandos.
Para correr los ejemplos dentro de SQL se puede usar el comando SOURCE, por ejemplo para correr el script Inmobiliaria.sql,
desde la línea de comando se corre 'SOURCE "SQL/Inmobiliaria.sql"'.
Los nombres de scripts que terminan con MySql deben ser ejecutados usando este dbms. Fueron usados para
corroborar resultados.


Organización de los archivos (para más detalles ver el código fuente):
-----------------------------
*) Init : Módulo inicial. Ofrece una linea de comandos al usuario.
*) Run : Llama al parser y le pasa el comando a la función adecuada para que lo procese.
*) DdlFunctions : Contiene las operaciones DDL.
*) DmlFunctions : Contiene las operaciones DML y las evaluaciones de las expresiones booleanas o numéricas.
*) UserFunctions : Operaciones para crear, borrar, seleccionar usuario.
*) AST (Data/AST): Contiene el AST y todas las abstracciones necesarias.
*) AVl (Data/Avl): Definición de Avl y funciones correspondientes.
*) COrdering (Data/COrdering) :  Definición de COrdering y funciones correspondientes.
*) DynGHC : Operaciones con módulos (caragar,leer,escribir)
*) Error : Define los errores.
*) Url : Crea rutas dentro del sistema de archivos.
*) Check : Hace distintos chequeos para comprobar que las operaciones se pueden realizar con seguridad.



Decisiones de diseño:
---------------------
 *) Representar tanto DDL como DML
 *) Representar tablas con árboles AVL  y registros con Diccionarios.
 *) Almacenar tablas de forma persistente como módulos haskell y cargarlos dinámicamente.
 *) Almacenar un estado usando una mónada.
 *) Modelar el uso de claves foráneas.


 Uso de código de terceros:
---------------------------
*) Para implementar la carga dinámica de módulos se usó el siguiente ejemplo:
https://purelyfunctional.org/posts/2016-05-20-dynamic-loading-haskell-module.html
*) El módulo Avl se descargó de la hackage (AvlTree-4.2) y fue modificado.
*) COrdering también se descargó de la hackage (COrdering-2.3) y fue modificado.





 Falto implementar union, diferencia e intersección entre consultas.
